import java.util.Scanner;

abstract class Account {
    String customerName;
    String accountNumber;
    double balance;

    public Account(String name, String number) {
        this.customerName = name;
        this.accountNumber = number;
        this.balance = 0.0;
    }

    public void deposit(double amount) {
        if (amount > 0) {
            balance += amount;
            System.out.println("Deposited: " + amount);
        } else {
            System.out.println("Invalid deposit amount.");
        }
    }

    public void displayBalance() {
        System.out.println("Current Balance: " + balance);
    }

    public abstract void withdraw(double amount);
}

class SavAcct extends Account {
    double interestRate;

    public SavAcct(String name, String number, double rate) {
        super(name, number);
        this.interestRate = rate;
    }

    public void computeAndDepositInterest() {
        double interest = balance * (interestRate / 100);
        deposit(interest);
        System.out.println("Interest added: " + interest);
    }

    public void withdraw(double amount) {
        if (amount > 0 && amount <= balance) {
            balance -= amount;
            System.out.println("Withdrawn: " + amount);
        } else {
            System.out.println("Insufficient balance.");
        }
    }
}

class CurAcct extends Account {
    private final double minimumBalance;
    private final double serviceCharge;

    public CurAcct(String name, String number, double minBalance, double charge) {
        super(name, number);
        this.minimumBalance = minBalance;
        this.serviceCharge = charge;
    }

    public void withdraw(double amount) {
        if (amount > 0 && amount <= balance) {
            balance -= amount;
            imposePenalty();
            System.out.println("Withdrawn: " + amount);
        } else {
            System.out.println("Insufficient balance.");
        }
    }

    public void imposePenalty() {
        if (balance < minimumBalance) {
            balance -= serviceCharge;
            System.out.println("Service charge applied: " + serviceCharge);
        }
    }
}

public class Bank {
    static Account[] accounts = new Account[100];
    static int count = 0;
    static Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) {
        System.out.print("Enter the number of customers: ");
        int n = scanner.nextInt();
        scanner.nextLine();

        for (int i = 0; i < n; i++) {
            boolean continueLoop = true;
            while (continueLoop) {
                showMenu();
                int choice = scanner.nextInt();
                scanner.nextLine();

                switch (choice) {
                    case 1: createAccount(true); break;
                    case 2: createAccount(false); break;
                    case 3: performTransaction("deposit"); break;
                    case 4: performTransaction("withdraw"); break;
                    case 5: computeInterest(); break;
                    case 6: displayBalance(); break;
                    case 7: continueLoop = false; break;
                    default: System.out.println("Invalid choice. Try again.");
                }
            }
        }
        scanner.close();
    }

    public static void showMenu() {
        System.out.println("\n1. Create Savings Account");
        System.out.println("2. Create Current Account");
        System.out.println("3. Deposit");
        System.out.println("4. Withdraw");
        System.out.println("5. Compute Interest");
        System.out.println("6. Display Balance");
        System.out.println("7. Exit");
        System.out.print("Choose an option: ");
    }

    public static void createAccount(boolean isSavings) {
        if (count < accounts.length) {
            System.out.print("Enter customer name: ");
            String name = scanner.nextLine();
            System.out.print("Enter account number: ");
            String number = scanner.nextLine();

            if (isSavings) {
                System.out.print("Enter interest rate: ");
                double rate = scanner.nextDouble();
                accounts[count++] = new SavAcct(name, number, rate);
            } else {
                System.out.print("Enter minimum balance: ");
                double minBalance = scanner.nextDouble();
                System.out.print("Enter service charge: ");
                double charge = scanner.nextDouble();
                accounts[count++] = new CurAcct(name, number, minBalance, charge);
            }
            scanner.nextLine();
            System.out.println((isSavings ? "Savings" : "Current") + " Account created.");
        } else {
            System.out.println("Max accounts reached.");
        }
    }

    public static void performTransaction(String type) {
        System.out.print("Enter account number: ");
        String number = scanner.nextLine();
        System.out.print("Enter amount: ");
        double amount = scanner.nextDouble();
        scanner.nextLine();

        for (Account account : accounts) {
            if (account != null && account.accountNumber.equals(number)) {
                if (type.equals("deposit")) {
                    account.deposit(amount);
                } else {
                    account.withdraw(amount);
                }
                return;
            }
        }
        System.out.println("Account not found.");
    }

    public static void computeInterest() {
        System.out.print("Enter account number: ");
        String number = scanner.nextLine();
        for (Account account : accounts) {
            if (account instanceof SavAcct && account.accountNumber.equals(number)) {
                ((SavAcct) account).computeAndDepositInterest();
                return;
            }
        }
        System.out.println("Savings Account not found or not applicable.");
    }

    public static void displayBalance() {
        System.out.print("Enter account number: ");
        String number = scanner.nextLine();
        for (Account account : accounts) {
            if (account != null && account.accountNumber.equals(number)) {
                account.displayBalance();
                return;
            }
        }
        System.out.println("Account not found.");
    }
}
